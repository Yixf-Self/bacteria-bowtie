plot(density(p_values_of_read_depth_seventyfive[,3],na.rm=T))
#Now, how many are significant p-values (<.05)?
newpowerseventyfive=length(which(p_values_of_read_depth_seventyfive[,3]<.05))/(75^2)
#And the power increase?
(newpowerseventyfive-newpowerfourtyfive)/newpowerfourtyfive
p_values_of_read_depth_fourtyfive=matrix(ncol=3)
i=1
j=1
for (i in 1:90) {
for (j in 1:90) {
temp_matrix=matrix(ncol=3,nrow=1)
temp_matrix[1,1]=i
temp_matrix[1,2]=j
temp_matrix[1,3]=fisher.test(rbind(c(i,76.5e4),c(j,76.5e4)))$p.value
p_values_of_read_depth_fourtyfive=rbind(p_values_of_read_depth_fourtyfive,temp_matrix)
}
#Let's see the distribution
hist(p_values_of_read_depth_fourtyfive[,3])
#And the pretty density plot
plot(density(p_values_of_read_depth_fourtyfive[,3],na.rm=T))
#Now, how many are significant p-values (<.05)?
newpowerfourtyfive=length(which(p_values_of_read_depth_fourtyfive[,3]<.05))/(45^2)
p_values_of_read_depth_fourtyfive=matrix(ncol=3)
i=1
j=1
for (i in 0:90) {
for (j in 0:90) {
temp_matrix=matrix(ncol=3,nrow=1)
temp_matrix[1,1]=i
temp_matrix[1,2]=j
temp_matrix[1,3]=fisher.test(rbind(c(i,76.5e4),c(j,76.5e4)))$p.value
p_values_of_read_depth_fourtyfive=rbind(p_values_of_read_depth_fourtyfive,temp_matrix)
}
newpowerfourtyfive=length(which(p_values_of_read_depth_fourtyfive[,3]<.05))/(90^2)
p_values_of_read_depth_seventyfive=matrix(ncol=3)
i=1
j=1
for (i in 0:150) {
for (j in 0:150) {
temp_matrix=matrix(ncol=3,nrow=1)
temp_matrix[1,1]=i
temp_matrix[1,2]=j
temp_matrix[1,3]=fisher.test(rbind(c(i,1.275e6),c(j,1.275e6)))$p.value
p_values_of_read_depth_seventyfive=rbind(p_values_of_read_depth_seventyfive,temp_matrix)
}
newpowerseventyfive=length(which(p_values_of_read_depth_seventyfive[,3]<.05))/(150^2)
(newpowerseventyfive-newpowerfourtyfive)/newpowerfourtyfive
fisher.test(rbind(c(90,76.5e4),c(90,76.5)))
fisher.test(rbind(c(90,76.5e4),c(90,76.5e4)))
fisher.test(rbind(c(90,76.5e4),c(1,76.5e4)))
hist(p_values_of_read_depth_fourtyfive[,3])
hist(p_values_of_read_depth_seventyfive[,3])
setwd("~/Dropbox")
?ad.test
library(nortest)
install.packages("nortest")
library(nortest)
?ad.test
ad.test(rnorm(100, mean = 5, sd = 3))
ad.test(runif(100, min = 2, max = 4))
install.packages("edgeR")
setRepositories()
install.packages("edgeR")
library("edgeR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
edgeRUsersGuide()
library("edgeR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("reshapeGUI", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
detach("package:reshapeGUI", unload=TRUE)
library("reshapeGUI", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("gWidgetsRGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
names <- c("aly","and","shiz","daniela","archi","bhav","keat")
sample(names,1)
sample(names,7)
?sample
sample(names,7,replace=T)
sample(names,7)
install.packages("foreach")
install.packages("Rmpi")
setRepositories()
install.packages("Rmpi")
install.packages("doMPI")
library(foreach)    # library for parallel for loop
?foreach
?mpi.quit
library(multicore)
library(doMC)
?registerDoMC
?doMC
?log
log2(1.5)
log2(2)
library(survival)
?survival
install.packages("MASS")
install.packages("getopt")
install.packages("mclust")
?rand
??rand
rnorm(1)
possible_questions = c("Frans","Ross","Capaldi")
sample(possible_questions,1)
sample(possible_questions,10)
sample(possible_questions,10,replace=T)
## the default random seed is 626 integers, so only print a few
runif(1); .Random.seed[1:6]; runif(1); .Random.seed[1:6]
## If there is no seed, a "random" new one is created:
rm(.Random.seed); runif(1); .Random.seed[1:6]
ok <- RNGkind()
RNGkind("Wich")  # (partial string matching on 'kind')
RNGkind()
# This shows how 'runif(.)' works for Wichmann-Hill,
## using only R functions:
p.WH <- c(30269, 30307, 30323)
a.WH <- c(  171,   172,   170)
next.WHseed <- function(i.seed = .Random.seed[-1])
{ (a.WH * i.seed) %% p.WH }
my.runif1 <- function(i.seed = .Random.seed)
{ ns <- next.WHseed(i.seed[-1]); sum(ns / p.WH) %% 1 }
rs <- .Random.seed
(WHs <- next.WHseed(rs[-1]))
u <- runif(1)
stopifnot(
next.WHseed(rs[-1]) == .Random.seed[-1],
all.equal(u, my.runif1(rs))
)
## ----
.Random.seed
RNGkind("Super") # matches  "Super-Duper"
RNGkind()
.Random.seed # new, corresponding to  Super-Duper
## Reset:
RNGkind(ok[1])
## ----
sum(duplicated(runif(1e6))) # around 110 for default generator
## and we would expect about almost sure duplicates beyond about
qbirthday(1 - 1e-6, classes = 2e9) # 235,000
lib.path()
thing<-c("jeff","archi","alyssa","ernesto","bhavani","daniela")
sample(thing,6)
fruit_fly_mass = c(.281,.351,.219,.304)
mean(fruit_fly_mass)
100*mean(fruit_fly_mass)
setRepositories()
install.packages("anota")
library("anota", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(anotaDataSet)
library("qvalue")
install.packages(c("annotate", "AnnotationDbi", "BatchJobs", "BBmisc", "biovizBase", "boot", "checkmate", "class", "cluster", "codetools", "datamart", "DBI", "digest", "edgeR", "fastcluster", "foreign", "Formula", "GenomicAlignments", "GenomicFeatures", "GenomicRanges", "Gviz", "Hmisc", "IRanges", "KernSmooth", "labeling", "limma", "manipulate", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "nlme", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RJSONIO", "RSQLite", "sendmailR", "VennDiagram", "xlsx", "xlsxjars", "xtable"))
library("anota", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk", unload=TRUE)
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk", unload=TRUE)
install.packages("tcltk2")
library("tcltk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk2", unload=TRUE)
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk", unload=TRUE)
capabilities("tcltk")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
library("anota", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("anota")
data(anotaDataSet)
anotaQcOut <- anotaPerformQc(dataT=anotaDataT[1:200,], dataP=anotaDataP[1:200,], phenoVec=anotaPhenoVec, nDfbSimData=500, useProgBar=FALSE)
anotaResidOut <- anotaResidOutlierTest(anotaQcObj=anotaQcOut, useProgBar=FALSE)
anotaSigOut <- anotaGetSigGenes(dataT=anotaDataT[1:200,], dataP=anotaDataP[1:200,], phenoVec=anotaPhenoVec, anotaQcObj=anotaQcOut, useRVM=FALSE, useProgBar=FALSE)
anotaSelected <- anotaPlotSigGenes(anotaSigObj=anotaSigOut, selContr=1, maxP=0.1, minSlope=(-0.5), maxSlope=1.5, selDeltaPT=0.5)
install.packages(c("boot", "class", "KernSmooth", "manipulate", "nnet", "rpart", "spatial"))
library(datamart)
library(cummeRbund)
library(xlsx)
cuff=readCufflinks(dbFile="cuffData.db",genome="dmel-r6.03")
remove.packages(pkgs = "RSQLite")
??packages
install.packages(pkgs = "../Downloads/RSQLite_0.11.4.tar.gz")
warnings()
con <- url("http://www.reddit.com","r")
x<-readLines(con)
head(x)
head(x)[1]
args(head)
args(readLines)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
help.search("dbConnect")
library(DBI)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
library("RSQLite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
?dbConnect
ucscDb <- dbConnect(RMySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(RSQLite(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect("RSQLite", user = "genome", host = "genome-mysql.cse.ucsc.edu")
?dbConnect
ucscDb <- dbConnect(drv="RSQLite", user = "genome", host = "genome-mysql.cse.ucsc.edu")
help.search("dbConnect")
help.search("MySQL")
help.search("RSqlLite")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setRepositories()
install.packages("DEseq")
install.packages("DESeq")
library("rversions", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
r_versions()
r_oldrel()
r_release()
r_versions()
library("rversions", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
r_versions()
r_release()
setRepositories()
install.packages("pamr")
install.packages("superpc")
install.packages("rPython")
setRepositories()
install.packages("phyloseq")
install.packages(c("ade4", "ape", "curl", "jsonlite", "manipulate", "MASS", "Matrix", "Rcpp", "RcppArmadillo", "roxygen2", "rPython", "vegan"))
a=c(1,2,5,6,7,7,3,4,8,9)
b=c(1,1,2,3,4,4,9,2,4,1)
mean(a)
mean(b)
sd(a)
sd(b)
a_norm=a/mean(a)
b_norm=b/mean(b)
x=data.frame(a,b)
View(x)
boxplot(x)
y=data.frame(a_norm,b_norm)
boxplot(y)
b
b_norm
a_log=log(a)
b_log=log(b)
z=data.frame(a_log,b_log)
boxplot(z)
a_log
b_log
a
?chisq.test
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
M
typeof(M)
N<-as.table(c(16,19,21,24))
dimnames(N)<-list(genotype=c("blue_mag","green_blue","blue_blue","green_mag"))
N
Xsq<-chisq.test(N)
Xsq
Xsq$observed
Xsq$expected
Xsq$residuals
Xsq$stdres
Xsq$statistic
Xsq$p.value
Xsq$parameter
x<-c(8,17,12,3)
p<-c(1,4,2,1)
Xsq<-chisq.test(x,p=p,rescale.p = T)
Xsq
Xsq$expected
?system
system('head load_my_functions.R')
?chisq.test
require(graphics)
dchisq(1, df = 1:3)
pchisq(1, df =  3)
pchisq(1, df =  3, ncp = 0:4)
x <- 1:10
all.equal(dchisq(x, df = 2), dexp(x, 1/2))
all.equal(pchisq(x, df = 2), pexp(x, 1/2))
Z0 <- rchisq(100, df = 0, ncp = 2.)
graphics::stem(Z0)
pchisq(.491,df=1)
dchisq(.491,df=1)
matrix=(c(58,42),c(50,50))
c(58,42)
mat=new.matrix(c(58,42),c(50,50))
mat=matrix(c(58,42),c(50,50))
thing=data.frame(c(58,42),c(50,50))
View(thing)
thing=data.frame(c(58,42),c(50,50),col.names=c("V1","V2"))
thing
thing=data.frame(V1=c(58,42),V2=c(50,50))
thing
fisher.test(thing)
?fisher.test
chisq.test(thing)
?chisq.test
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
M
(Xsq <- chisq.test(M))
Xsq$observed
Xsq$expected
x<-c(58,42)
p<-c(.5,.5)
chisq.test(x,p=p)
x<-c(63,37)
chisq.test(x,p=p)
x
x<-c(50,50)
chisq.test(x,p=p)
?repeat
?range
temp=c(4:24)
temp=c(4:23)
?runif
?sample
sample(x = temp,size = 20,replace = F)
sample(x = temp,size = 20,replace = T)
sample(x = temp,size = 20,replace = F)
x=c(154,46)
p=c(.75,.25)
chisq.test(x,p=p)
x=c(103,97)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(56,64)
p
chisq.test(x,p=p)
x=c(46,154)
p=c(.25,.75)
chisq.test(x,p=p)
x=c(70,230)
chisq.test(x,p=p)
x=c(69,231)
chisq.test(x,p=p)
x=c(46,156)
p
chisq.test(x,p=p)
x=c(59,141)
chisq.test(x,p=p)
x=c(0,200)
chisq.test(x,p=p)
x=c(101,39,47,13)
x=c(9/16,3/16,3/16,1/16)
p=x
p
x
x=c(101,39,47,13)
chisq.test(x,p=p)
x=c(105,95)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(106,94)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(148,52)
p=c(.75,.25)
chisq.test(x,p=p)
x
p
x=c(66,54)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(50,95,84,50,92,91,95,90,91,70,99,50,90,90,75,70,77,75,95,93)
x=c(50,95,84,50,92,91,95,90,91,70,99,50,90,90,75,70,77,75,95,93)
x
summary(x)
hist(x)
hist(x,xlim=c(0,100))
x=c(93,107)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(142,58)
p=c(.75,.25)
chisq.test(x,p=p)
x=c(37,21,26,36,21,15,16,18)
chisq.test(x)
x=c(31,30,18,15,35,36,17,18)
chisq.test(x)
x=c(84,36)
p=c(.75,.25)
chisq.test(x)
x
p
chisq.test(x,p=p)
x=c(112,92)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(110,95)
chisq.test(x,p=p)
x=c(134,70)
chisq.test(x,p=p)
x=c(113,91)
chisq.test(x,p=p)
x=c(69,51)
chisq.test(x,p=p)
x=c(128,88)
chisq.test(x,p=p)
x=c(105,95)
p=c(.5,.5)
chisq.test(x,p=p)
x=c(118,82)
chisq.test(x,p=p)
x-c(117,83)
x=c(117,83)
chisq.test(x,p=p)
list=c("jose","neil","kelly","stephanie t","sarah d","jennifer w","matt m","megan e","jared","trinh")
list.sample=sample(x = list,size = 10,replace = F)
list.sample
x=c(34,23,25,22,30,24,20,21)
chisq.test(x)
chisq.test(x)->test
test
test$expected
test$residuals
x=c(21,83,73,24)
chisq.test(x)
list.sample
save.image("~/Google Drive/Untitled.RData")
load("~/Google Drive/Untitled.RData")
list.sample
names = c("sergio","samantha","kelly","sarah davis","matt m","megan ealy","jared aldor","trinh nguyen","anshula","alex")
names.sample = sample(name,10)
names.sample = sample(names,10)
names.sample
names.sample = sample(names,10)
names.sample
?sample
x=c(86,18,24,5,17,67,4,19)
chisq.test(x)
x=c(47,10,62,12,13,33,12,51)
chisq.test(x)
x=(116,84)
x=c(116,84)
chisq.test(x)
names.sample
names=c('megan','samantha','jose','stephanie','sergio','matt','kelly','cassidy','trinh')
names.sample=sample(names,10)
names.sample=sample(names,9)
names.sample
frame=(parental=c(53,34),recomb=c(70,43))
frame=data.frame(parental=c(53,34),recomb=c(70,43))
chisq.test(frame)
chisq.test(frame)->test
test
test$parameter
test$data.name
test$observed
test$expected
frame.expected=data.frame(parental=c(50,50),recomb=c(50,50))
frame.expected=data.frame(parental=c(.25,.25),recomb=c(.25,.25))
test=chisq.test(frame,p=frame.expected)
test
test$expected
test$observed
frame.expected
?chisq.test
frame.expected=data.frame(parental=c(50,50),recomb=c(50,50))
test=chisq.test(frame,p=frame.expected)
test
test$expected
test=chisq.test(frame,p=frame.expected,rescale.p = T)
chisq.test(frame,p=frame.expected,rescale.p = T)
chisq.test(frame,p=frame.expected,rescale.p = T,correct = F)
test=chisq.test(frame,p=frame.expected,rescale.p = T,correct = F)
test$expected
x=c(53,43,70,34)
p=c(59.04,36.96,63.96,40.04)
test=chisq.test(x=x,p=p,rescale.p = T)
test
test$observed
test$expected
names.sample
x=c(58,142)
p=c(.33,.67)
chisq.test(x=x,p=p)
p=c(.25,.75)
chisq.test(x=x,p=p)
142/58
names=c("steph H","steph T","samantha","christelle","megan","cassidy","jose","kelly","sarah","trinh")
sample.name=sample(names)
sample.name
names = c('nikki','anshula','kelly','jennifer','samantha','sarah','jose','alyssa','nathan','stephanie hughes')
sample.names = sample(names,10)
sample.names
ls()
dir()
help()
array=("the cookie monster","vegan snickerdoodle","peanut butter","double choc","vegan choc chip","choc chip")
array=c("the cookie monster","vegan snickerdoodle","peanut butter","double choc","vegan choc chip","choc chip")
sample(array,1)
what = c("nothing",)
what = c("nothing",
"yoga",
"play eu4",
"play piano",
"work on poster",
"tweak out on magic cards",
"cry",
)
what = c("nothing","yoga","play eu4","play piano","work on poster","work on anvio data","tweak out on magic cards","cry")
sample(what)
sample(what,1)
?system
library("DESeq2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
vignette(DESeq)
vignette("DESeq2")
detach("package:DESeq2", unload=TRUE)
library("DESeq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
vignette("DESeq")
detach("package:DESeq", unload=TRUE)
setwd("/Users/Scott/tophat-bacteria/scripts/R-interactive")
setwd("/Users/Scott/Google Drive/Hurwitz Lab/manual_LPS_cuffdiff/")
setwd("/Users/Scott/tophat-bacteria/scripts/R-interactive")
